#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("catalogocredenciales:server");
var http = require("http");
var https = require("https");
var fs = require("fs");
var { ssl } = require("../config");

let mode = "http";

try {
  var options = {
    cert: fs.readFileSync(ssl.cert),
    key: fs.readFileSync(ssl.key),
  };
  mode = "https";
} catch (err) {
  console.error("ERROR: No se ha encontrado el certificado SSL. Verifique las rutas configuradas.");
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || (mode == 'http' ? '80' : '443'));
app.set("port", port);

/**
 * Create HTTP/HTTPS server.
 */

if (mode == 'http') {
  var server = http.createServer(app);
} else {
  var server = https.createServer(options, app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log("Server is running");
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
